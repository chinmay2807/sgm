
#include <iostream>
#include <cstdlib>
#include <conio.h>
#include <windows.h>
#include<bits/stdc++.h>
using namespace std;

const int width = 30;
const int height = 30;
enum Button { STOP = 0, LEFT, RIGHT, UP, DOWN };
Button b;
int sx, sy, tx[ 900], ty[900],numt, ax, ay, sc;     //sx:snake y,sy:snake y,ay:apple y ,sc:score , numt =tail count,tx and ty are array of tail x and y coordinates 
bool g_o;   //bool game over

class Sgame {       //class of snake game
private:        //to keep the setup of the game private and giving user the access to only play the game and not access and disturb the flow and working of the game--abstraction

    void Print() {      // function that prints the game setup
        system("cls");      //to not print game step by step one after other sleep but to clear and then print again
        for (int i = 0; i < width + 2; i++){

            cout << "?";        // '?' tells the boundary
        }
        cout << endl;

        for (int i = 0; i < height; i++) {      
            for (int j = 0; j < width; j++) {
                if (j == 0){

                    cout << "?";
                }
                if (i == sy && j == sx){

                    cout << "S";
                }
                else if (i == ay && j == ax){

                    cout << "A";
                }
                else {
                    bool p = false;
                    for (int k = 0; k < numt; k++) {
                        if (tx[k] == j && ty[k] == i) {
                            cout << "T";
                            p = true;
                        }
                    }
                    if (!p){

                        cout << " ";
                    }
                }
                if (j == width - 1){

                    cout << "?";
                }
            }
            cout << endl;
        }

        for (int i = 0; i < width + 2; i++){

            cout << "?";
        }
        cout << endl << "Score: " << sc << endl;
    }

    void Input() {      // setting up commands
        if (_kbhit()) {
            switch (_getch()) {
            case 'w':
                b = UP;
                break;
            case 's':
                b = DOWN;
                break;
            case 'a':
                b = LEFT;
                break;
            case 'd':
                b = RIGHT;
                break;
            case 'm':
                g_o = true;
                break;
            }
        }
    }

    void Logic() {
        int prevX = tx[0];      // condition for tail to follow the head
        int prevY = ty[0];
        int prev2X, prev2Y;
        tx[0] = sx;
        ty[0] = sy;
        for (int i = 1; i < numt; i++) {
            prev2X = tx[i];
            prev2Y = ty[i];
            tx[i] = prevX;      //to make it follow the previous
            ty[i] = prevY;
            prevX = prev2X;     //updation for next iteration of the for loop
            prevY = prev2Y;
        }
        switch (b) {
        case LEFT:
            sx--;
            break;
        case RIGHT:
            sx++;
            break;
        case UP:
            sy--;
            break;
        case DOWN:
            sy++;
            break;
        default:
            break;
        }
        if (sx >= width || sx < 0 || sy >= height || sy < 0){

            g_o = true;
        }
        if (sx == ax && sy == ay) {
            
            sc++;
            ax = rand() % width;
            ay = rand() % height;
            numt++;
        }
        for (int i = 0; i < numt; i++) {

            if (tx[i] == sx && ty[i] == sy)
                g_o = true;
        }          // snakes mouth on its own tail
    }
public:
    Sgame() {
        b = STOP;       //snake has to be not moving initially
        sx = width-4;       // initialising snakes position
        sy = height-4;
        ax = rand() % width;        // we want the apple-x to be in random position and to be inside the boundary
        ay = rand() % height;
        sc = 0;     //initialise score to 0
        numt = 0;
        g_o = false;        //game has just started ðŸ˜ŽðŸ˜Ž
        while(!g_o){        // until u fulfill the conditions to lose
            Print();
            Input();
            Logic();
            Sleep(100);             //to slow down flicker
        }
    }
};

int main() {
    Sgame game;
    return 0;
}
