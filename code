//IN CPP
// follows all the rules of classical snake game
//     https://microsoft.github.io/tilecode/doc/mechanics.html

// S represents the head   t represents the tail and @ represents the apple while # is boundary
//TRY TO PLAY ONCE .YOU WILL LOVE IT.
//first i planned there to be 2 modes --easy and hard that u can access by easy() for easy and hard() for hard
//in easy the apple is away from the boundary and snake moves slow while in hard mode the snake moves fast and the appple gets close to the boundary
//'''BUT''' i made so that a person can train slowly to be a champion using these two modes with slight changes
// by controlling the snake speed or it is basically the refresh rate
// there are 2 modes to control to how far the apple will stay away from the boundary while u can control the snake speed in both the levels with some boundary conditions
// in easy mode the snake speed or the refresh rate can be from 5-fps(sleep-200) to 20-fps(sleep-50)
// in hard mode the snake speed or the refresh rate can be from 10-fps(sleep-100) to 200-fps(sleep-5)
// if the user sets speed out of the boundary conditions for then in both the cases the lower speed will be set
// i tried to make it hell lot of coloured but it got very slow so i made it only a bit coloured




#include<stdlib.h>
#include<conio.h>
#include<windows.h>
#include<bits/stdc++.h>
#include<cstdlib>
#include<time.h>
using namespace std;


int key=0;                                                 // to decide the level of the game
const int width=40;
const int height=20;
bool g_o;                                                  //bool game over
enum button{STOP=0,LEFT,RIGHT,UP,DOWN};
button b;
int sx,sy,tx[800],ty[800],numt,ax,ay,sc;                    //sx:snake y,sy:snake y,ay:apple y ,sc:score , numt =tail count,tx and ty are array of tail x and y coordinates 
class screen{
    void print(){                                           // function that prints the game setup
        system("CLS");                                      //to not print game step by step one after other sleep but to clear and then print again
        system("Color E4");
        for(int i=0;i<width+1;i++){
            cout<<"#";                                      // '?' tells the boundary
        }
        cout<<endl;
        for(int i=0;i<height;i++){
            for(int j=0;j<width;j++){
                if(j==0){
                // system("Color 0E");
                    cout<<"#";
                }else if(i==sy && j==sx){
                    // system("Color 02");
                    cout<<"S";
                }else if(i==ay && j==ax){
                    // system("Color 04");
                    cout<<"@";
                }else{
                    bool p =false;
                    for (int n=0;n<numt;n++){
                        if(j==tx[n] && i==ty[n]){
                            // system("Color 02");
                            cout<<"T";
                            p = true;
                        }
                    }if(!p){
                        // system("Color 07");
                        cout<<" ";
                    }
                }
                if(j==width-1){
                    // system("Color 0E");
                    cout<<"#";
                }
            }
            cout<<endl;
        }
        for(int i=0;i<width+1;i++){
            // system("Color 0E");
            cout<<"#";
        }
        // system("Color 0B");
        cout<<endl<<"Score :"<<sc;
    }
public:
    screen(){
        print();
    }
};
class input{
void play(){        //setting up commands
    if(_kbhit()){                      
        switch(_getch()){
            case 'w':
                if (b == LEFT || b == RIGHT || b == STOP){
                    b=UP;
                }
                    break;
            case 's':
                if (b == LEFT || b == RIGHT || b == STOP){
                    b=DOWN;
                }
                    break;
            case 'a':
                if (b == UP || b == DOWN || b == STOP){
                    b=LEFT;
                }
                    break;
            case 'd':
                if (b == UP || b == DOWN || b == STOP){
                    b=RIGHT;
                }
                    break;
            case 'm':
                g_o=true;
                break;
            default:
                break;
        }
    }
}
public:
    input(){
        play();
    }
};
class rules{
void conditions(){
    int tempx=tx[0],tempy=ty[0],ttempx,ttempy;
    tx[0]=sx;                       // condition for tail to follow the head
    ty[0]=sy;
    for(int i=1;i<numt;i++){
        ttempx=tx[i];
        ttempy=ty[i];
        tx[i]=tempx;                    //to make it follow the previous
        ty[i]=tempy;
        tempx=ttempx;                   //updation for next iteration of the for loop
        tempy=ttempy;
    }
    switch(b){
        case UP:                        // what does the button b does 
                sy--;
                break;
        case DOWN:
                sy++;
                break;

        case RIGHT:
                sx++;
                break;

        case LEFT:
                sx--;
                break;

        default:
            break;
    }
    if(sx<0 || sx>=width || sy<0 || sy>=height){  // snake gets out of the boundary
        g_o=true;
    }
    if(sx==ax && sy==ay){  // snake eats the apple 
        sc++;
        numt++;
        if(key ==0 ){
            ax = rand() % width;
            ay = rand() % height;
            if(ax<1 || ax>(height -1)){
            if(ax<1){
                ax+=1;
            }else{
                ax-=1;
            }
        }
        if(ay<1 || ay>(height -1)){
            if(ay<1){
                ay+=1;
            }else{
                ay-=1;
            }
        }

        }else{
            ax = rand () % width;                                // we want the apple-x to be in random position and to be inside the boundary
            ay= rand () % height;                                // we want the apple-y to be in random position and to be inside the boundary
            if(ax<4 || ax>(height -4)){
                if(ax<4){
                    ax+=6;
                }else{
                    ax-=6;
                }
            }
            if(ay<4 || ay>(height -4)){
                if(ay<4){
                    ay+=6;
                }else{
                    ay-=6;
                }
            }
        }
    }
    for(int i=0;i<numt;i++){
        if(sx==tx[i] && sy==ty[i]){             // snakes mouth on its own tail
            g_o=true;
            break;
        }
    }
}
public:
    rules(){
        conditions();
    }
};
class Sgame:private screen,private input,private rules{                                                //class of snake game inheriting all the components so that user has access only to start the game no access to the working of the code
void starteasy(int a1){
        key=1;                                                // to make game easy for noobs
        b=STOP;                                              //snake has to be not moving initially
        sx=width-4,sy=height-4;                              // initialising snakes position
        ax = rand () % width;                                // we want the apple-x to be in random position and to be inside the boundary
        ay= rand () % height;                                // we want the apple-y to be in random position and to be inside the boundary
        if(ax<4 || ax>(height -4)){
            if(ax<4){
                ax+=6;
            }else{
                ax-=6;
            }
        }
        if(ay<4 || ay>(height -4)){
            if(ay<4){
                ay+=6;
            }else{
                ay-=6;
            }
        }
        sc=0,numt=0;                                         //initialise score to 0
        g_o=false;                                           //game has just started ðŸ˜ŽðŸ˜Ž
        while(!g_o){                                         // until u fulfill the conditions to lose
            screen();
            input();
            rules();
            if(a1<50 || a1>200){                                  //to control refresh rate or speed of snake
                Sleep(200);
            }else{
                Sleep(a1);
            }
                                                    
        }
}
void starthard(int a1){  
        b=STOP;                                              //snake has to be not moving initially
        sx=width-4,sy=height-4;                              // initialising snakes position
        ax = rand () % width;                                // we want the apple-x to be in random position and to be inside the boundary
        ay= rand () % height;                                // we want the apple-y to be in random position and to be inside the boundary
        if(ax<1 || ax>(height)){
            if(ax<1){
                ax+=1;
            }else{
                ax-=1;
            }
        }
        if(ay<0 || ay>(height)){
            if(ay<0){
                ay+=1;
            }else{
                ay-=1;
            }
        }
        sc=0,numt=0;                                         //initialise score to 0
        g_o=false;                                           //game has just started ðŸ˜ŽðŸ˜Ž
        while(!g_o){                                         // until u fulfill the conditions to lose
            screen();
            input();
            rules();
            if(a1>100 || a1<5){                              //to control refresh rate or speed of snake
                Sleep(100);
            }else{
                Sleep(a1);
            }                          
        }
}
public:
    Sgame(){}
    inline friend void easy(int a);
    inline friend void hard(int a);
};
void easy(int a1){
    Sgame a;
    a.starteasy(a1);
}
void hard(int a1){
    Sgame a;
    a.starthard(a1);
}
int main(){
    srand(time(NULL)); 
    // easy(10);// if u want to play easy mode
    hard(20);   //-- if u want to plaaaaaaaawwday hard mode
}
